/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FxButton {
        /**
          * @Prop () is how we define props that our web component will have. The below example of "theme", of various string types,
         */
        "theme": 'primary' | 'secondary' | 'danger';
    }
    interface FxModal {
        /**
          * An optional list of buttons that can be applied
         */
        "buttons": string;
        /**
          * The title / heading of the modal. Note that "title" isnt used as a prop name here as "title" is a native html prop which we do not want to overwrite
         */
        "heading": string;
        "isopen": boolean;
    }
}
declare global {
    interface HTMLFxButtonElement extends Components.FxButton, HTMLStencilElement {
    }
    var HTMLFxButtonElement: {
        prototype: HTMLFxButtonElement;
        new (): HTMLFxButtonElement;
    };
    interface HTMLFxModalElement extends Components.FxModal, HTMLStencilElement {
    }
    var HTMLFxModalElement: {
        prototype: HTMLFxModalElement;
        new (): HTMLFxModalElement;
    };
    interface HTMLElementTagNameMap {
        "fx-button": HTMLFxButtonElement;
        "fx-modal": HTMLFxModalElement;
    }
}
declare namespace LocalJSX {
    interface FxButton {
        /**
          * @Prop () is how we define props that our web component will have. The below example of "theme", of various string types,
         */
        "theme"?: 'primary' | 'secondary' | 'danger';
    }
    interface FxModal {
        /**
          * An optional list of buttons that can be applied
         */
        "buttons"?: string;
        /**
          * The title / heading of the modal. Note that "title" isnt used as a prop name here as "title" is a native html prop which we do not want to overwrite
         */
        "heading"?: string;
        "isopen"?: boolean;
        /**
          * This creates a custom event that can be listened to via document.addEventListener  In this example, we have created a new event listener called "action", so we can access this via document.addEventListener('action', customFunctionHere)
         */
        "onAction"?: (event: CustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "fx-button": FxButton;
        "fx-modal": FxModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fx-button": LocalJSX.FxButton & JSXBase.HTMLAttributes<HTMLFxButtonElement>;
            "fx-modal": LocalJSX.FxModal & JSXBase.HTMLAttributes<HTMLFxModalElement>;
        }
    }
}
